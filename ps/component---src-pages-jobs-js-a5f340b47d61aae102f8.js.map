{"version":3,"sources":["webpack:///./src/components/Quotes/Quote.styled.js","webpack:///./src/components/Quotes/Quote.js","webpack:///./src/assets/lib/str-jsx.js","webpack:///./src/components/Jobs/JobFull.styled.js","webpack:///./src/components/Jobs/JobFull.js","webpack:///./src/components/Jobs/Job.styled.js","webpack:///./src/components/Jobs/Job.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack:///./src/containers/Jobs/Links.js","webpack:///./src/containers/Jobs/Search.styled.js","webpack:///./src/containers/Jobs/Search.js","webpack:///./src/containers/Jobs/Jobs.styled.js","webpack:///./src/containers/Jobs/Jobs.js","webpack:///./src/pages/jobs.js"],"names":["QuoteStyled","styled","div","quo","quote","author","find_mentions","src","text","src_arr","split","re","RegExp","output","matches","replace","match","i","found","toLowerCase","trim","str","push","key","className","dangerouslySetInnerHTML","__html","JobFullStyled","job","body","mentions","length","map","title","meta","JobStyled","Links","props","shouldComponentUpdate","nextProps","this","render","source","excluded","target","sourceKeys","Object","keys","indexOf","React","Component","jobsFound","jobSelected","srcText","onClick","console","log","jobsList","uid","SearchStyled","onChange","jobsFoundLength","useState","tempText","set_tempText","useEffect","type","value","event","onKeyPress","warn","onBlur","JobsStyled","Jobs","findMentions","setState","obj","company","set_jobsFound","state","componentDidMount","Search","JobFull","quotes","Quote"],"mappings":"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","file":"component---src-pages-jobs-js-a5f340b47d61aae102f8.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const QuoteStyled = styled.div`\n`;\n","import React from \"react\"\nimport { QuoteStyled } from \"./Quote.styled.js\"\n\nexport default function ({ quo = {} }) {\n  return <QuoteStyled>\n    <h4>{quo.quote}</h4>\n    <sup>{quo.author}</sup>\n  </QuoteStyled>\n}\n","import React from \"react\"\n\n/**\n * Find and highlight mentions of a word or phrase in a large body of text.\n *    Find phrases which mention a keyword. Highlight the keyword\n * @param src {string} - keyword / search term\n * @param text {string} - fulltext body in which to search for keyword\n * @returns {array} - array of JSX elements, to be used by React like <div>{phrases}</div>\n */\nexport function find_mentions(src, text) {\n  let src_arr = src.split(\"|\")\n  let re_beforeAfter = \"[\\\\p{L}\\\\d: ’'\\\"-]\"\n  let re = new RegExp(\"(\" + re_beforeAfter + \"{0,120})(\" + src + \")(\" + re_beforeAfter + \"{0,240})\", \"ugim\")\n  // text\n  text = text.replace(/{{.*?}}/g, \" \")\n  text = text.replace(/http.+html|\\||\\s|http/g, \" \")\n  text = text.replace(/([A-Z]{1})\\./g, \"$1\")\n  text = text.replace(/\\.\\.\\.|\\[\\[|]]|===/g, \"\")\n  text = text.replace(/([\\p{L}]+)[\\d]+/gu, \"$1\")\n  text = text.replace(/%[0-9]{2}|\\s+|\\+|-/g, \" \")\n  text = text.replace(/  /g, \"\\n\")\n\n  // found\n  let output = []\n  let matches = text.match(re)\n  if (!matches) return output\n  let i = 0\n  for (let found of matches) {\n    found = found.toLowerCase()\n    found = found.replace(/'s|’s/g, \"*s\")\n    found = found.replace(/['’]+/g, \"\")\n    found = found.replace(/\\*/g, \"’\").trim()\n    for (let str of src_arr) {\n      found = found.replace(str, '<span class=\"highlighted\">' + str + \"</span>\")\n    }\n    output.push(<span key={i} className=\"mention\" dangerouslySetInnerHTML={{ __html: found }} />)\n    i++\n  }\n\n  // format\n  return output\n}\n","import styled from \"styled-components\"\n\nexport const JobFullStyled = styled.div`\n  overflow: hidden;\n  margin: 0.5rem 0 0;\n  .title {\n    white-space: nowrap;\n  }\n  .meta {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    font-size: 0.75rem;\n    position: relative;\n    top: -0.25rem;\n    opacity: 0.5;\n  }\n  span.highlighted {\n    background: hsla(57deg, 100%, 70%, 0.75);\n  }\n\n  .mentions {\n    margin: 0 0 1.5rem;\n    .mention {\n      border-bottom: solid 2px hsla(57deg, 100%, 70%, 0.75);\n      margin: 0 0.5rem 0.5rem;\n      &:first-child {\n        margin-left: 0;\n      }\n      &:last-child {\n        margin-right: 0;\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { JobFullStyled } from \"./JobFull.styled.js\"\n\nexport default function ({ job = {} }) {\n  if (!job.body) return null\n  let mentions = job.mentions || []\n  return (\n    <JobFullStyled>\n      {!!mentions.length && <div className=\"mentions\">{mentions.map((found) => found)}</div>}\n      <h3>{job.title}</h3>\n      <p>{job.meta}</p>\n      <div className=\"body\" dangerouslySetInnerHTML={{ __html: job.body }} />\n    </JobFullStyled>\n  )\n}\n","import styled from \"styled-components\"\n\nexport const JobStyled = styled.div`\n  overflow: hidden;\n  .title {\n    white-space: nowrap;\n  }\n  .meta {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    font-size: 0.75rem;\n    position: relative;\n    top: -0.25rem;\n    opacity: 0.5;\n  }\n  span.highlighted {\n    background: hsla(57deg, 100%, 70%, 0.75);\n  }\n  .mentions {\n    .mention {\n      &:before {\n        content: \"| \";\n      }\n      &:first-child:before {\n        content: \"\";\n      }\n      &:after {\n        content: \" \";\n      }\n      &:last-child:after {\n        content: \"\";\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { JobStyled } from \"./Job.styled.js\"\n\nexport default class Links extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  shouldComponentUpdate(nextProps) {\n    /*\n     * ONLY UPDATE COMPONENT if it is selected/deselected, not if content changed.\n     * To update content, re-build entire list of jobs at the container level.\n     */\n    return nextProps.className !== this.props.className\n  }\n\n  render() {\n    const { job = {}, src = \"\", ...props } = this.props\n    if (!job.title) return null\n    return (\n      <JobStyled {...props}>\n        <h4 className=\"title\">{job.title}</h4>\n        {!!job.mentions && !!job.mentions.length && (\n          <div className=\"meta mentions\">{job.mentions.map((found) => found)}</div>\n        )}\n      </JobStyled>\n    )\n  }\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from \"react\"\nimport Job from \"src/components/Jobs/Job.js\"\n\nexport default function ({ jobsFound = {}, jobSelected = {}, srcText = \"\", onClick = () => {} }) {\n  // const [srcText, set_srcText] = useState(\"remote|wfh|telecommute|remotely|work from\")\n  // const [jobSelected, set_jobSelected] = useState({})\n  console.log('Links.js jobsFound',jobsFound);\n  let jobsList = []\n  for (let uid in jobsFound) {\n    jobsList.push(jobsFound[uid])\n  }\n  console.log('Links.js jobsList',jobsList);\n  return (\n    <div className=\"Links\">\n      {jobsList.map((job, i) => {\n        if (job) {\n          return (\n            <div\n              key={i + job.title}\n              onClick={() => {\n                onClick(job)\n              }}\n            >\n              <Job job={job} src={srcText} className={jobSelected === job ? \" highlighted\" : \"\"} />\n            </div>\n          )\n        } else {\n          return null\n        }\n      })}\n    </div>\n  )\n}\n","import styled from \"styled-components\"\n\nexport const SearchStyled = styled.div`\n  border: none;\n  margin: 1rem -1px 0.5rem;\n  padding: 0;\n  min-width: 240px;\n  max-width: 360px;\n  display: flex;\n  .fieldset {\n    flex-grow: 1;\n  }\n  .found {\n    font-size: 0.875rem;\n    opacity: 0.75;\n    vertical-align: middle;\n    white-space:nowrap;\n  }\n`\n","import React, { useState, useEffect } from \"react\"\nimport { SearchStyled } from \"./Search.styled.js\"\n\nexport default function ({ srcText = \"\", onChange = () => {}, jobsFoundLength = 0 }) {\n  /*\n   * Local state updates when incoming props changes\n   */\n  const [tempText, set_tempText] = useState(srcText)\n  useEffect(() => {\n    set_tempText(srcText)\n  }, [srcText])\n  /*\n   * View\n   */\n  return (\n    <SearchStyled className=\"Search\">\n      <div className=\"fieldset\">\n        <input\n          type=\"text\"\n          value={tempText}\n          onChange={(event) => {\n            set_tempText(event.target.value)\n          }}\n          onKeyPress={(event) => {\n            console.warn(\"Input onKeyPress()\", event.key)\n            if (event.key === \"Enter\") {\n              onChange(tempText)\n            }\n          }}\n          onBlur={() => {\n            set_tempText(srcText)\n          }}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            onChange(tempText)\n          }}\n        >\n          find\n        </button>\n      </div>\n      <span className=\"found\">found: {jobsFoundLength}</span>\n    </SearchStyled>\n  )\n}\n\n// import React, { useState } from \"react\"\n//\n// export default class Links extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       tempText: props.tempText || \"\"\n//     }\n//   }\n//   render() {\n//     const { srcText = \"\", onChange = () => {} } = this.props\n//     return (\n//       <fieldset>\n//         <input\n//           type=\"text\"\n//           value={tempText}\n//           onChange={(event) => {\n//             this.setState({ tempText: event.target.value })\n//           }}\n//         />\n//         <button\n//           type=\"button\"\n//           onClick={() => {\n//             onChange(tempText)\n//           }}\n//         >\n//           find\n//         </button>\n//       </fieldset>\n//     )\n//   }\n// }\n","import styled from \"styled-components\"\n\nexport const JobsStyled = styled.div`\n  background: white;\n  font-family: sans-serif;\n  fieldset {\n    border: none;\n    margin: 1rem -1px 0.5rem;\n    padding: 0;\n  }\n  .middle {\n    display: flex;\n    height: 100vh;\n    .side {\n      color: #2557a7;\n      position: relative;\n      min-width: 240px;\n      max-width: 360px;\n      padding: 0 0.5rem;\n      overflow: auto;\n      .Links {\n        padding: 0 0.5rem;\n        cursor: pointer;\n        .highlighted {\n          background: hsla(57deg, 100%, 70%, 0.75);\n        }\n      }\n      .Search {\n        padding: 0 0.5rem;\n      }\n    }\n    .main {\n      position: relative;\n      flex-grow: 1;\n      min-width: 720px;\n      overflow: scroll;\n      .full_job_text {\n        box-sizing: border-box;\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 100%;\n        height: 100%;\n        padding: 0.5rem 1.5rem;\n      }\n      .quotes {\n        text-align: center;\n        padding: 0 2.5rem;\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport jobsList from \"src/assets/json/indeed-js-node-remote.json\"\nimport quotes from \"src/assets/json/quotes.json\"\nimport Quote from \"src/components/Quotes/Quote.js\"\nimport { find_mentions } from \"src/assets/lib/str-jsx.js\"\nimport JobFull from \"src/components/Jobs/JobFull.js\"\nimport Links from \"./Links.js\"\nimport Search from \"./Search.js\"\nimport { JobsStyled } from \"./Jobs.styled.js\"\n\nexport default class Jobs extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      srcText: \"\",\n      jobSelected: {},\n      jobsFound: {},\n      jobsFoundLength: 0\n    }\n  }\n  componentDidMount() {\n    this.findMentions(\"remote|wfh|telecommute|remotely|work from\")\n  }\n\n  /*\n   * USER INTERACTIONS\n   */\n  findMentions = (srcText) => {\n    // set search string, reset results\n    this.setState({ srcText: srcText, jobSelected: {}, jobsFoundLength: 0 }, () => {\n      let jobsFoundLength = 0\n      let jobsFound = {}\n      let jobSelected = {}\n      /*\n       * iterate ORIGINAL UNCHANGED LIST {Array}\n       */\n      for (let obj of jobsList) {\n        if (obj && obj.job) {\n          obj.job.mentions = srcText ? find_mentions(srcText, obj.job.body) : []\n          // not found, skip\n          if (!obj.job.mentions.length) continue\n          // auto-select first found result\n          if (!jobSelected.body) {\n            jobSelected = obj.job\n          }\n          // save, with unique key\n          jobsFound[obj.job.title + obj.job.company] = obj.job\n          jobsFoundLength++\n        }\n      }\n      /*\n       * output FILTERED EDITED DICTIONARY {Object}\n       */\n      this.setState({ jobsFoundLength, jobSelected })\n      this.set_jobsFound(jobsFound)\n    })\n  }\n  set_jobsFound = (jobsFound) => {\n    // first, clear jobsFound, to force all jobs to update\n    // because they are configured to update only when selected/deselected\n    this.setState({ jobsFound: {} }, () => {\n      // set new data\n      this.setState({ jobsFound })\n    })\n  }\n\n  /*\n   * VIEW\n   */\n  render() {\n    console.warn(\"render Jobs.js\", this.state.srcText)\n    return (\n      <JobsStyled>\n        <div className=\"middle\">\n          <div className=\"side\">\n            {/*\n             * SEARCH - highlight word\n             */}\n            <Search\n              srcText={this.state.srcText}\n              onChange={(str) => {\n                this.findMentions(str)\n              }}\n              jobsFound={this.state.jobsFound}\n              jobsFoundLength={this.state.jobsFoundLength}\n            />\n            {/*\n             * NAVIGATION - jobs links\n             */}\n            <Links\n              className=\"jobs\"\n              jobsFound={this.state.jobsFound}\n              jobSelected={this.state.jobSelected}\n              srcText={this.state.srcText}\n              onClick={(job) => {\n                this.setState({ jobSelected: job })\n              }}\n            />\n          </div>\n          <div className=\"main\">\n            {/*\n             * FULL DESCRIPTION - selected job\n             */}\n            <div className=\"full_job_text\">\n              <JobFull job={this.state.jobSelected} src={this.state.srcText} />\n            </div>\n            {/*\n             * QUOTES - if no job selected\n             */}\n            {!this.state.jobSelected.body && (\n              <div className=\"quotes\">{quotes.map((quo, i) => (quo ? <Quote key={i} quo={quo} /> : null))}</div>\n            )}\n          </div>\n        </div>\n      </JobsStyled>\n    )\n  }\n}\n","import React from \"react\"\nimport Page from \"src/containers/Jobs/Jobs\"\n\nexport default function() {\n  return <Page />\n}\n"],"sourceRoot":""}